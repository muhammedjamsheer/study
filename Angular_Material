       INPUT FEILD
       -----------
          <div class="form-group ">
            <mat-form-field class="mat-input " appearance="outline">
              <mat-label>name</mat-label>
              <input matInput type="text" formControlName="name" placeholder="name"
                [ngClass]="{ 'is-invalid': submitted && f.name.errors }">
            </mat-form-field>
            <span class="invalid-feedback force-show" ng-show="f.name.errors" *ngIf="f.name.errors  && submitted">name
              is required</span>
          </div>

  	.force-show{
  	  display: block !important;
  	  width: 100%;
  	  margin-top: 0.25rem;
  	  font-size: 80%;
  	  color: #f86c6b;
  	}
            
       TEXTAREA FEILD
       --------------
          <div class="form-group ">
            <mat-form-field class="mat-input" appearance="outline">
              <mat-label>Address</mat-label>
              <textarea matInput type="text" formControlName="address" placeholder="address" rows="4" cols="50"
                [ngClass]="{ 'is-invalid': submitted && f.address.errors }">
                  </textarea>
            </mat-form-field>
            <span class="invalid-feedback force-show" ng-show="f.address.errors"
              *ngIf="f.address.errors  && submitted">address is required</span>
          </div>

        DROPDOWN
        --------
          <div class="form-group ">
            <mat-form-field class="mat-input"  appearance="outline">
              <mat-label>Locations</mat-label>
              <mat-select formControlName="location" (selectionChange)="onChangeType($event)">
                <mat-option *ngFor="let location of locations" [value]="location.id">
                  {{location.district_name}}
                </mat-option>
              </mat-select>
            </mat-form-field>
            <span class="invalid-feedback force-show" ng-show="f.location.errors"
              *ngIf="f.location.errors  && submitted">email template is required
            </span>
          </div> 
        </div>

       
    onChangeType(valueType) {
      this.myservice.get_theater_movies(valueType.value).subscribe(res => {
        res['all_movies'].forEach(element => {
          this.movies.push(element['movies']);
        });
    });

    BUTTON FAB
    ------------
    <div class="fab-container">
      <button routerLink="/theaters/theater_create" mat-button-ripple mat-fab class="matfab" container="body"
        ngbTooltip="Add stage">
        <i class="material-icons">add</i>
      </button>
    </div>

  .fab-container {
    position: fixed;
    bottom: 107px;
    right: 34px;
    z-index: 100;
    display: flex;
    flex-direction: column-reverse;
    align-items: center;
  }

  MULTIPLE CHECKBOX DELETE
  ------------------------
  https://stackblitz.com/edit/delete-rows-mat-table?file=app%2Ftable-selection-example.html
   <i (click)="removeSelectedRows()" class="material-icons">delete</i>

    <ng-container matColumnDef="select">
    <th mat-header-cell *matHeaderCellDef>
      <mat-checkbox (change)="$event ? masterToggle() : null" [checked]="selection.hasValue() && isAllSelected()"
        [indeterminate]="selection.hasValue() && !isAllSelected()">
      </mat-checkbox>
    </th>
    <td mat-cell *matCellDef="let element">
      <mat-checkbox (click)="$event.stopPropagation()" (change)="$event ? selection.toggle(element) : null"
        [checked]="selection.isSelected(element)">
      </mat-checkbox>
    </td>
  </ng-container>

 app.component.ts
 ------------------
    import { SelectionModel } from '@angular/cdk/collections';
    selection = new SelectionModel<Owner>(true, []);
   
    isAllSelected() {
    const numSelected = this.selection.selected.length;
    const numRows = this.dataSource.data.length;
    return numSelected === numRows;
  }
  removeSelectedRows() {
    this.selection.selected.forEach(item => {
      this.myservice.delete_theatre(item['id']).subscribe(data => {
        this.getall_theaters();
      });
    });
    if (this.selection.selected.length) {
      this.notifier.notify('success', 'deleted');
    }
    this.selection = new SelectionModel<Owner>(true, []);
  }
  masterToggle() {
    this.isAllSelected() ?
      this.selection.clear() :
      this.dataSource.data.forEach(row => this.selection.select(row));
  }
